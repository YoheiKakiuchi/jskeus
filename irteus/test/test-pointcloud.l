(require :unittest "lib/llib/unittest.l")

(init-unit-test)

(defun points-size-check (make-element-func &key (size 10))
  (let ((pt-p (instance pointcloud :init
                        :points (funcall make-element-func)))
        (pt-pc (instance pointcloud :init
                         :points (funcall make-element-func)
                         :colors (funcall make-element-func)))
        (pt-pn (instance pointcloud :init
                         :points  (funcall make-element-func)
                         :normals (funcall make-element-func)))
        (pt-pcn (instance pointcloud :init
                          :points  (funcall make-element-func)
                          :colors  (funcall make-element-func)
                          :normals (funcall make-element-func))))
    (points-size-check-impl pt-p pt-pc pt-pn pt-pcn :size size)
    ))

(defun points-size-check-impl (pt-p pt-pc pt-pn pt-pcn &key (size 10))
  (assert (= (send pt-p :size) size))
  (assert (equal (array-dimensions (send pt-p :points)) (list size 3)))
  (assert (null (send pt-p :colors)))
  (assert (null (send pt-p :normals)))

  (assert (= (send pt-pc :size) size))
  (assert (equal (array-dimensions (send pt-pc :points)) (list size 3)))
  (assert (equal (array-dimensions (send pt-pc :colors)) (list size 3)))
  (assert (null (send pt-pc :normals)))

  (assert (= (send pt-pn :size) size))
  (assert (equal (array-dimensions (send pt-pn :points)) (list size 3)))
  (assert (null (send pt-pn :colors)))
  (assert (equal (array-dimensions (send pt-pn :normals)) (list size 3)))

  (assert (= (send pt-pcn :size) size))
  (assert (equal (array-dimensions (send pt-pcn :points)) (list size 3)))
  (assert (equal (array-dimensions (send pt-pcn :colors)) (list size 3)))
  (assert (equal (array-dimensions (send pt-pcn :normals)) (list size 3)))

  (let ((plist (send pt-p :point-list)))
    (assert (and (= (length plist) size)
                 (listp plist))))
  (let ((clist (send pt-p :color-list)))
    (assert (null clist)))
  (let ((nlist (send pt-p :normal-list)))
    (assert (null nlist)))

  (let ((plist (send pt-pc :point-list)))
    (assert (and (= (length plist) size)
                 (listp plist))))
  (let ((clist (send pt-pc :color-list)))
    (assert (and (= (length clist) size)
                 (listp clist))))
  (let ((nlist (send pt-pc :normal-list)))
    (assert (null nlist)))

  (let ((plist (send pt-pn :point-list)))
    (assert (and (= (length plist) size)
                 (listp plist))))
  (let ((clist (send pt-pn :color-list)))
    (assert (null clist)))
  (let ((nlist (send pt-pn :normal-list)))
    (assert (and (= (length nlist) size)
                 (listp nlist))))

  (let ((plist (send pt-pcn :point-list)))
    (assert (and (= (length plist) size)
                 (listp plist))))
  (let ((clist (send pt-pcn :color-list)))
    (assert (and (= (length clist) size)
                 (listp clist))))
  (let ((nlist (send pt-pcn :normal-list)))
    (assert (and (= (length nlist) size)
                 (listp nlist))))
  )

(defun filter-check (pt &key (keyword :key) func)
  (let ((org-size (send pt :size))
        (filtered-pt (send pt :filter keyword func :create t)))
    (assert (= (send pt :size) org-size))
    (warn ";; filtered ~D points~%" (- org-size (send filtered-pt :size)))
    (case keyword
      (:key
       (dolist (p (send filtered-pt :point-list))
         (assert (funcall func p))))
      (:ckey
       (dolist (c (send filtered-pt :color-list))
         (assert (funcall func c))))
      (:nkey
       (dolist (n (send filtered-pt :normal-list))
         (assert (funcall func n))))
      (:pckey
       (mapc #'(lambda (p c)
                 (assert (funcall func p c)))
             (send filtered-pt :point-list)
             (send filtered-pt :color-list)))
      (:pnkey
       (mapc #'(lambda (p n)
                 (assert (funcall func p n)))
             (send filtered-pt :point-list)
             (send filtered-pt :normal-list)))
      (:pcnkey
       (mapc #'(lambda (p c n)
                 (assert (funcall func p c n)))
             (send filtered-pt :point-list)
             (send filtered-pt :color-list)
             (send filtered-pt :normal-list)))
      (t
       (warn ";; unknown keyword ~A~%" keyword)
       (assert nil)))
    ))

(defun filter-check-create ()
  (let ((p (make-random-pointcloud :num 20 :with-normal t :with-color t))
        pt ret)
    (setq pt (instance pointcloud :init
                       :points (append (list (float-vector 1000 1000 1000)) (send p :point-list))
                       :colors (append (list (float-vector 1.11 2.22 3.33)) (send p :point-list))
                       :normals (append (list (float-vector 4.44 5.55 6.66)) (send p :point-list))))
    (assert (= (send pt :size) 21))
    (setq ret (send pt :filter :key #'(lambda (p) (equal p #f(1000 1000 1000))) :create t))
    (assert (= (send pt :size) 21))
    (assert (= (send ret :size) 1))
    (let ((cl (send ret :color-list)))
      (assert (= (length cl) 1))
      (equal (car cl) (float-vector 1.11 2.22 3.33)))
    (let ((nl (send ret :normal-list)))
      (assert (= (length nl) 1))
      (equal (car nl) (float-vector 4.44 5.55 6.66)))

    (send pt :filter :key #'(lambda (p) (equal p #f(1000 1000 1000))))
    (setq ret pt)
    (assert (= (send ret :size) 1))
    (let ((cl (send ret :color-list)))
      (assert (= (length cl) 1))
      (equal (car cl) (float-vector 1.11 2.22 3.33)))
    (let ((nl (send ret :normal-list)))
      (assert (= (length nl) 1))
      (equal (car nl) (float-vector 4.44 5.55 6.66)))
    ))
#|
(send pt :convert-to-world)
(send pt :transform-points cds :create t)
(send pt :append (list ...))
|#

(deftest test-pointcloud
  ;;
  (points-size-check #'(lambda () (make-matrix 10 3)))
  ;;
  (points-size-check #'(lambda () (let (l) (dotimes (i 10) (push (float-vector 0 0 0) l)) l)))
  ;;
  (points-size-check-impl
   (make-random-pointcloud :num 100)
   (make-random-pointcloud :num 100 :with-color t)
   (make-random-pointcloud :num 100 :with-normal t)
   (make-random-pointcloud :num 100 :with-color t :with-normal t)
   :size 100)
  ;;
  (filter-check (make-random-pointcloud :num 40)
                :keyword :key :func #'(lambda (p) (> (elt p 0) 0)))
  (filter-check (make-random-pointcloud :num 40 :with-color t)
                :keyword :ckey :func #'(lambda (c) (> (elt c 0) 0)))
  (filter-check (make-random-pointcloud :num 40 :with-normal t)
                :keyword :nkey :func #'(lambda (n) (> (elt n 0) 0)))
  (filter-check (make-random-pointcloud :num 40 :with-color t)
                :keyword :pckey :func #'(lambda (p c) (> (elt c 0) 0)))
  (filter-check (make-random-pointcloud :num 40 :with-normal t)
                :keyword :pnkey :func #'(lambda (p n) (> (elt n 0) 0)))
  (filter-check (make-random-pointcloud :num 40 :with-color t :with-normal t)
                :keyword :pcnkey :func #'(lambda (p c n) (> (elt p 0) 0)))
  ;;
  (filter-check-create)
  (print 'done)
  )

(run-all-tests)
(exit)
